What is React JSX?
React JS uses JSX for templating instead of the regular JavaScript. Though it is not mandatory to use it, it is recommended to use it for the following advantages:
•	It’s faster because of the reason that it performs optimization during the code compilation to JavaScript
•	It is type-safe, meaning any errors would be caught on code compilation itself
•	If you are familiar with HTML, then you can write templates easier and also faster
Using JSX:
JSX is nothing more than regular HTML code and also looks similar to HTML code. This is already encountered in our Environment setup section of the article already, where we introduced you to App.jsx in which we were returning a div to main.js for rendering it on the browser. Let us relook at that sample again
1
2
3
4
5
6
7
8
9
10
11
12	import React from 'react';
 
class App extends React.Component {
   render() {
      return (
         < div >
            Hello World!!!
         </ div >
      );
   }
}
export default App;
Advanced JSX:
Though the JSX code looks similar to HTML code, there are few things that we need to take care of. If we are returning more than one element, then these should be wrapped into a single container element. Let us check that out in a sample example below:
1
2
3
4
5
6
7
8
9
10
11
12
13
14	import React from 'react';
 
class App extends React.Component {
   render() {
      return (
         < div >
            < h1 >Header< /h1 >
            < h2 >Content< /h2 >
            < p >This is the content!!!< /p >
         < /div >
      );
   }
}
export default App;
In the same example, we can provide a custom attribute in addition to the regular HTML code that has been written already. If we want to add a custom attribute, then we need to make use of the data- prefix. In the above example, let us add one custom property called data-mycustomattribute
1
2
3
4
5
6
7
8
9
10
11
12
13
14	import React from 'react';
 
class App extends React.Component {
   render() {
      return (
         < div >
            < h1 >Header< /h1 >
            < h2 >Content</h2>
            <p data-mycustomattribute = "somevalue">This is the content!!!</p>
         </div>
      );
   }
}
export default App;
Pro JSX:
In the examples above, we have just used simple HTML code additional to what can be achieved with a single “Hello, World!” React JS program. There are further constructs that could be used to do arithmetic operations, ternary operations, styling, and add some comments to your React programs. These can be achieved by using just the same sample program and replace the ordinary HTML code with an aforementioned construct from React.
                                 -------  Related Page: Introduction to ReactJS  -------
React JS - Components
As we have already discussed earlier, any of the React code that you would want to write would have to go under a component. With this understanding, let us learn how to combine components in order to make the application well maintained. This approach will allow changing your component without even affecting the rest of the page.
Stateless Example:
In the example below, our first and foremost component is App and it is the owner of Header and Content. We are attempting to create Header and Content separately and then adding it back to the JSX tree in the App component. In this requirement, there is only a change required in the App component. Let us check this example out, here comes App.jsx:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32	import React from 'react';
 
class App extends React.Component {
   render() {
      return (
         < div >
            < Header />
            < Content />
         < /div >
      );
   }
}
class Header extends React.Component {
   render() {
      return (
         < div >
            < h1 >Header< /h1 >
         < /div >
      );
   }
}
class Content extends React.Component {
   render() {
      return (
         < div >
            < h2 >Content< /h2 >
            < p >The content text!!!< /p >
         < /div >
      );
   }
}
export default App;
And we want this to be rendered onto the browser as well, hence we need to import this into the main.js file and then make a call to reactDOM.render() method. Let us check out main.js:
1
2
3
4
5	import React from 'react';
import ReactDOM from 'react-dom';
import App from './App.jsx';
 
ReactDOM.render(<App />, document.getElementById('app'));
On running the above code, this is what the browser would be displaying.
 
Stateful Example:
In this example, we would follow the same main component App as earlier. The Header component is added like in the previous example without any change and also it doesn’t need any state-related details. Instead of adding a Content tag, we would go ahead with a table implementation to add as many rows as we could dynamically add. Let us look at App.jsx:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61	import React from 'react';
 
class App extends React.Component {
   constructor() {
      super();
      this.state = {
         data: 
         [
            {
               "id":1,
               "name":"Foo",
               "age":"20"
            },
            {
               "id":2,
               "name":"Bar",
               "age":"30"
            },
            {
               "id":3,
               "name":"Baz",
               "age":"40"
            }
         ]
      }
   }
   render() {
      return (
         < div >
            < Header />
            < table >
               < tbody >
                  {this.state.data.map((person, i) => <TableRow key = {i} 
                     data = {person} />)}
               < /tbody >
            < /table >
         < /div >
      );
   }
}
class Header extends React.Component {
   render() {
      return (
         < div >
            < h1 >Header< /h1 >
         < /div >
      );
   }
}
class TableRow extends React.Component {
   render() {
      return (
         <tr>
            <td>{this.props.data.id}</td>
            <td>{this.props.data.name}</td>
            <td>{this.props.data.age}</td>
         </tr>
      );
   }
}
export default App;
Let us now look at main.js:
1
2
3
4	import React from 'react';
import ReactDOM from 'react-dom';
import App from './App.jsx';
ReactDOM.render(<App/>, document.getElementById('app'));

React JS Certification Training!
Explore Curriculum

On running this program, we would now be able to see that, instead of a stateless Content tag, we are now able to display dynamically added data with some state details attached to it.
 
React JS - State
A state can be defined as the place from where your value is coming from. We should always make sure that the state is kept as simple as possible, and also at the same time, we should always look for opportunities to reduce the number of stateful components. Let any number of components need their state value, we should always have a container component that holds the state details of all these components.
We can refer to the examples discussed in the previous section to understand more about State in the React JS world and also how it can be used.
React JS - Props
The only difference that one can identify between a State and Props is that Props are actually immutable objects. This is the main reason why Container component always has a state defined, which gets updated or altered, whereas the children components should pass on data from State using Props.
Props Overview:
We are continuing the discussion that we initiated while understanding what Props are. Now, let’s check a simple example where we can use some Props values and how we can access them or render them on the browser. Let us take a look at App.jsx:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16	import React from 'react';
class App extends React.Component {
   render() {
      return (
         < div >
            < h1 >{this.props.headerProp}< /h1 >
            < h2 >{this.props.contentProp}< /h2 >
         < /div >
      );
   }
}
App.defaultProps = {
   headerProp: "Header from props...",
   contentProp:"Content from props..."
}
export default App;
Let us take a look at main.js:
1
2
3
4
5	import React from 'react';
import ReactDOM from 'react-dom';
import App from './App.jsx';
 
ReactDOM.render(<App/>, document.getElementById('app'));
When we run this on the browser, we would be able to see that the default Props constructor values are rendered on the browser.
 
Props Validation:
Validation on the properties is a useful technique to ensure the proper usage of components. It will also help reduce the number of bugs that we might get very late after crossing the development phases. Doing so, it makes your code pretty readable.
Let us take an example with the main component as App and have all the properties that are required. App.propTypes will be used for the necessary properties validation. If the properties are not using the right types, then we would receive a warning for the same. We can set App.defaultProps after specifying the validation patterns. Let us now take a look at App.jsx:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42	import React from 'react';
 
class App extends React.Component {
   render() {
      return (
         < div >
            < h3 >Array: {this.props.propArray}< /h3 >
            < h3 >Bool: {this.props.propBool ? "True..." : "False..."}< /h3 >
            < h3 >Func: {this.props.propFunc(3)}< /h3 >
            < h3 >Number: {this.props.propNumber}< /h3 >
            < h3 >String: {this.props.propString}< /h3 >
            < h3 >Object: {this.props.propObject.objectName1}< /h3 >
            < h3 >Object: {this.props.propObject.objectName2}< /h3 >
            < h3 >Object: {this.props.propObject.objectName3}< /h3 >
         < /div >
      );
   }
}
 
App.propTypes = {
   propArray: React.PropTypes.array.isRequired,
   propBool: React.PropTypes.bool.isRequired,
   propFunc: React.PropTypes.func,
   propNumber: React.PropTypes.number,
   propString: React.PropTypes.string,
   propObject: React.PropTypes.object
}
 
App.defaultProps = {
   propArray: [1,2,3,4,5],
   propBool: true,
   propFunc: function(e){return e},
   propNumber: 1,
   propString: "String value...",
    
   propObject: {
      objectName1:"objectValue1",
      objectName2: "objectValue2",
      objectName3: "objectValue3"
   }
}
export default App;
Let us now take a look at main.js:
1
2
3
4	import React from 'react';
import ReactDOM from 'react-dom';
import App from './App.jsx';
ReactDOM.render(<App/>, document.getElementById('app'));
React JS - Component API
In this section, let us learn something about the React Component APIs. There are mainly three methods that we would want to discuss about -> setState(), forceUpdate() and ReactDOM.findDOMNode().
The setState() method will be used to update the state of the component. It will not replace the state of the component but only adds the changes to the original state.
The forceUpdate() method updates the component manually and this API helps in achieving just that.
The ReactDOM.findDOMNode() method is used for the DOM Node manipulations. For this to happen, we first need to import the react-dom module.



React JS - Component Life Cycle
In this section, let us discuss in detail about the Component’s life-cycle. All the life-cycle methods are inside the component itself. The following are the sequence of events that happen during a request-response that is handled by a component. Let us take a look at each of these methods and also try to understand the concepts behind them:
1. componentWillMount is the method call, that gets called before rendering, on the client-side and the server-side alike.
2. componentDidMount is the method call, that gets called after the first time that it renders and this happens only on the client-side. This is the place where all the AJAX requests and state or DOM updates occur. This method is generally used for integration purposes with other JavaScript frameworks or functions with delayed execution as like setInterval or setTimeout.
3. componentWillReceiveProps is the method call, that gets called along with props update and also before any other render request is received.
4. shouldComponentUpdate is a boolean method call that returns either false or true. In turn, it determines whether or not the component gets updated. This is set to true by default. If there is no necessity for the component to render with an update of either the state or props, then this can be returned as false always.
5. component will update is the method call, which gets called before rendering the component.
6. componentDidUpdate is the method call, which gets called after rendering the component.
7. componentWillUnmount is the method call, which gets called just after the component is unmounted from the DOM.


React JS - Events
Event handling is the topic that we would be discussing here. On the component examples that we have seen till now, let us try and add some onClick events to show the power of React JS Events. When you want to update the state of the Parent component from one of its child components, we can then make use of the event handler (updateState) on the Parent component and pass it as a property to the child component.
Let us get down to some code and how it fares (App.jsx):
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34	import React from 'react';
 
class App extends React.Component {
   constructor(props) {
      super(props);
       
      this.state = {
         data: 'Initial data...'
      }
      this.updateState = this.updateState.bind(this);
   };
   updateState() {
      this.setState({data: 'Data updated from the child component...'})
   }
   render() {
      return (
         < div >
            <Content myDataProp = {this.state.data} 
               updateStateProp = {this.updateState}></Content>
         < /div >
      );
   }
}
class Content extends React.Component {
   render() {
      return (
         < div >
            <button onClick = {this.props.updateStateProp}>CLICK</button>
            < h3 >{this.props.myDataProp}</h3>
         < /div >
      );
   }
}
export default App;



React JS - Keys, Router
React Keys are useful when you are going to work closer with dynamically created components or when your lists are being altered by other users. Keeping the key-value unique will enable you to keep your components identified uniquely. Now, with this understanding of keys, let us now go through what Routers are in React JS. Routers let you route around your application via the links that we create to various components of the application. Let us now go through the step by step process of installation and a sample example to understand this.
1. Install the React JS Router component:
Installing the React JS Router component is as easy as running the following npm command, just the way we followed during the React JS environment setup.
1	C:Users<Your Username>DesktopReactJSApplication>npm install react-router
2. Create the necessary components:
In this step, we shall be creating 4 components - one the main component (App) and the other three components are for the required traversal (Home, About, Contact). Let us look at these changes in the App.jsx file:
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52	import React from 'react';
import ReactDOM from 'react-dom';
import { Router, Route, Link, browserHistory, IndexRoute } from 'react-router'
 
class App extends React.Component {
   render() {
      return (
         < div >
            < ul >
            < li >Home< /li >
            < li >About< /li >
            < li >Contact< /li >
            < /ul >
            {this.props.children}
         < /div >
      )
   }
}
export default App;
 
class Home extends React.Component {
   render() {
      return (
         < div >
            < h1 >Home...< /h1 >
         < /div >
      )
   }
}
export default Home;
 
class About extends React.Component {
   render() {
      return (
         < div >
            < h1 >About...< /h1 >
         < /div >
      )
   }
}
export default About;
 
class Contact extends React.Component {
   render() {
      return (
         < div >
            < h1 >Contact...< /h1 >
         < /div >
      )
   }
}
export default Contact;
3. Add a Router to complete the flow:
Based on the components that we have created earlier, we have to add the routes as appropriate to the application. Instead of rendering the App component itself in the other examples, what we would be doing is to render the Route element itself. Let us take a look at these changes on the main.js file:
1
2
3
4
5
6
7
8
9
10	ReactDOM.render((
   < Router history = {browserHistory} >
      < Route path = "/" component = {App} >
         < IndexRoute component = {Home}  />
         < Route path = "home" component = {Home}  />
         < Route path = "about" component = {About}  />
         < Route path = "contact" component = {Contact}  />
      < /Route >
   < /Router >
), document.getElementById('app'))
Once the application is run, we will be able to see the links alone on the browser and when we choose to click on any of the links showcased (then you can see that the route has been changed).


